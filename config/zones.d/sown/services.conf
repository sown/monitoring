template Service "generic-service" {
	max_check_attempts = 5
	check_interval = 1m
	retry_interval = 30s
}

template Service "continuous-service" {
	import "generic-service"
	check_interval  = 1m
}

template Service "frequent-service" {
	import "generic-service"
	check_interval  = 1h
}

template Service "infrequent-service" {
	import "generic-service"
	check_interval  = 1d
}

apply Service for (address => interface in host.vars.addresses) {
	import "generic-service"
	check_command = "check_ipmi"
	vars.check_from_host = if (host.vars.location == "B53") {
		"GW-B53"
	} else {
		"GW-B32"
	}
	assign where interface in ["ipmi0", "idrac0", "iDRAC"]
	name = "IPMI"
}

template Service "sown-ping-common" {
	vars.ping_wpl = 20
	vars.ping_cpl = 50
	vars.ping_packets = 10
}

apply Service for (address => interface in host.vars.addresses){
	import "generic-service"
	import "sown-ping-common"
	check_command = "ping"
	vars.ping_address = address
	assign where !cidr_match("10.5.1.0/24", address) # exclude IPs on mgmt vlan
	name = if (address == host.address) {
			"PING4"
		} else if (address == host.address6) {
			"PING6"
		} else {
			"PING-" + interface + "-" + address
		}
}

apply Service for (address => interface in host.vars.addresses){
	import "generic-service"
	import "sown-ping-common"
	check_command = "ping"
	vars.ping_wpl = 50
	vars.ping_cpl = 100
	vars.ping_address = address
	command_endpoint = "external-monitor.sown.org.uk"
	assign where !cidr_match("10.5.0.0/16", address)
	name = if (address == host.address) {
			"EXT-PING4"
		} else if (address == host.address6) {
			"EXT-PING6"
		} else {
			"EXT-PING-" + interface + "-" + address
		}
}

apply Service "POWER" {
	import "generic-service"
	check_command = "check_psu"
	assign where host.vars.power_count > 1
}

apply Service "SSH" {
	import "continuous-service"
	check_command = "ssh"
	assign where host.vars.role in ServerRoles
}

apply Service "PROCS" {
	import "continuous-service"
	check_command = "check_total_procs"
	assign where host.vars.role in ServerRoles
}

apply Service "ZOMBIE" {
	import "continuous-service"
	check_command = "check_zombie_procs"
	assign where host.vars.role in ServerRoles
}

apply Service "SYSTEMD" {
	import "continuous-service"
	check_command = "check_systemd"
	assign where host.vars.role in ServerRoles
}

apply Service "UNAME" {
	import "continuous-service"
	check_command = "check_uname"
	assign where host.vars.role in ServerRoles
}

apply Service "NRPE" {
	import "continuous-service"
	check_command = "check_nrpe"
	assign where host.vars.role in ServerRoles
}

apply Service "MAILBOX" {
	import "frequent-service"
	check_command = "check_mail"
	assign where host.vars.role in ServerRoles
}

apply Service "LOAD" {
	import "continuous-service"
	check_command = "check_load"
	assign where host.vars.role in ServerRoles
}

apply Service "UPTIME" {
	import "continuous-service"
	check_command = "check_uptime"
	assign where host.vars.role in ServerRoles
}

apply Service "USERS" {
	import "continuous-service"
	check_command = "check_users"
	assign where host.vars.role in ServerRoles
}

apply Service "REBOOT" {
	import "frequent-service"
	check_command = "check_reboot"
	assign where host.vars.role in ServerRoles
}

apply Service "PACKAGES" {
	import "frequent-service"
	check_command = "check_packages"
	assign where host.vars.role in ServerRoles
}

apply Service "TEMP" {
	import "continuous-service"
	check_command = "check_temp"
	assign where "Physical" == host.vars.type
}

apply Service for (backserver in get_objects(Host).filter(function(h) { "Backup Server" == h.vars.role }).map((h => h.name))) to Host {
	//add a backup service for all hosts being backed up for every backup server
	import "generic-service"
	check_command = "passive"
	check_interval = 36h
	vars.dummy_state = 2
	assign where "Backup" in host.vars.tags
	name = "BACKUP-" + backserver
}

apply Service "RAID" {
	import "infrequent-service"
	check_command = "check_raid"
	assign where "RAID" in host.vars.tags
}

apply Service "DEBSUMS" {
	import "infrequent-service"
	check_command = "check_debsums"
	assign where host.vars.role in ServerRoles
}

apply Service "DISKS" {
        import "continuous-service"
        check_command = "check_disks"
        assign where host.vars.role in ServerRoles
}

apply Service "ZPOOL-HEALTH" {
	import "frequent-service"
	check_command = "check_zpool_health"
	assign where "Backup Server" == host.vars.role 
}

apply Service "ZPOOL-USAGE" {
	import "frequent-service"
	check_command = "check_zpool_usage"
	assign where "Backup Server" == host.vars.role
}

apply Service "GIT" {
	import "frequent-service"
	check_command = "check_git"
	assign where host.vars.role in ServerRoles
}

apply Service "CONNTRACKD" {
        import "frequent-service"
        check_command = "check_conntrackd"
        assign where "Router" == host.vars.role
}

apply Service "KEEPALIVED" {
        import "frequent-service"
        check_command = "check_keepalived"
        assign where "Router" == host.vars.role
}
